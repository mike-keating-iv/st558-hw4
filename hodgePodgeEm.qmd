---
title: "HW4: Hodge Podge Em"
author: "Mike Keating"
format: pdf
editor: visual
---

## Task 1

### Q1: What is the purpose of the lapply() function? What is the equivalent purrr function?

The purpose of lapply() is to apply a function to each element of a list.

The equivalent purr function is map().

### Q2: Suppose we have a list called my_list. Each element of the list is a numeric data frame (all columns are numeric). We want use lapply() to run the code cor(numeric_matrix, method = "kendall") on each element of the list. Write code to do this below! (Iâ€™m really trying to ask you how you specify method = "kendall" when calling lapply()

```{r}

df1 <- data.frame(col1 = c(1 ,3, 4), col2 =c(2, 5, 5))
df2 <- df1 * 2

my_list <- list(df1, df2)

lapply(my_list, cor, method = "kendall")


```

### Q3: What are 2 advantages of using purr functions instead of BaseR apply family?

The purr functions allow for the use of helper/anonymous functions which will help us write more compact code.

The purr functions (map) have options like map_dbl() and map_int() can help us ensure our output is of a specific type.

### Q4: What is a side-effect function?

A side-effect function is a function that performs an action outside of it's normal scope. In other words, something else happens in addition to returning a value.

### Q5: Why can you name a variable sd in a function and and not cause any issues with the sd function?

The variables created within the function are local/accessible only to the function. They are not initialized in the greater environment, so they do not conflict with the sd function.
